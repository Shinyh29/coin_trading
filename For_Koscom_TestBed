# Koscom_로보어드바이저 Testbed 알고리즘모델
# (1) 모델에 대한 경제적인 관점 먼저 -> (2) 알고리즘 
# 1. 종목별비중 // 2. 일별수익률 // 3. 자산군별 Daily비중

plt.rcParams["figure.figsize"] = (10,6)
import FinanceDataReader as fdr
import pandas as pd
import numpy as np
#%matplotlib inline
import matplotlib.pyplot as plt

table_신호 = pd.DataFrame()
table_모멘텀 = pd.DataFrame() 
table_rChange = pd.DataFrame()

# M_num > 2 이상 int :: M_num일간 모멘텀(상승률) 이니깐
M_num = 5

table_today_macdos = []
today_macdos = []
tomorrow_macdos = []
## 두리스트 초기화

## ticker = list(universe.keys())[0]

n = 0
def today_macdo_get(ticker, startdate):

    #print(ticker)
    print(name)

    df = fdr.DataReader(ticker, startdate)
    # 최근부터  보기싫은 일자 Date 숫자로 전달 n 
    #n = 150
    #df = df[:-n]

    def get_macd(df , short = 12 , long = 26, t=9):
        df = pd.DataFrame(df)
        ma_12 = df.Close.ewm(span=12).mean()
        ma_26 = df.Close.ewm(span=26).mean()
        macd = ma_12 - ma_26
        macds = macd.ewm(span=9).mean()
        macdo = macd - macds
        df = df.assign(macd= macd, macds= macds, macdo = macdo).dropna()
        return df



    df_macdplus = get_macd(df)
    df_macdplus = get_macd(df)
    df = df_macdplus
    df['Zeros'] = 0
    df['rChange'] = df['Change'] + 1
    df['osc_on'] = np.where(df['macdo'].shift(-1) > df['Zeros'], df['Change']+1, 1)
    df['test'] = np.where(df['osc_on'] >= df['rChange'], 1, 0)
    rolling_test = df['test'].rolling(window=25).sum()/25 * 100
    df['rolling25_test'] = rolling_test

    # 전일자 의 macdo 가 0보다 크다면,  오늘자의 Change 상승률 Long포지션
    # "" 0보다 작다면, 오늘자의 Change 상승률 포지션은 현금보유(전량매도) ==1

    #### ------여기부터 For Koscom Testbed
    df['Position'] = np.where(df['macdo'] > df['Zeros'], 1, 0)
    table_신호[ticker] = df['Position']         
    table_모멘텀[ticker] = df['Close'] / df['Close'].shift(M_num)
    table_rChange[ticker] = df['rChange']
    if ticker == '069500': # kodex 200
        plt.plot(df.index[M_num::], df['rChange'][M_num::].cumprod(), label = name) 
        plt.legend(loc='upper left')

    elif ticker == '133690': # TIGER 미국나스닥100
        plt.plot(df.index[M_num::], df['rChange'][M_num::].cumprod(), label = name)
        plt.legend(loc='upper left')

    elif ticker == '229200': # KODEX 코스닥150
        plt.plot(df.index[M_num::], df['rChange'][M_num::].cumprod(), label = name)
        plt.legend(loc='upper left')

    elif ticker == '192090': # TIGER 차이나CSI300
        plt.plot(df.index[M_num::], df['rChange'][M_num::].cumprod(), label = name)
        plt.legend(loc='upper left')

    elif ticker == '132030': # KODEX 골드선물(H)
        plt.plot(df.index[M_num::], df['rChange'][M_num::].cumprod(), label = name)
        plt.legend(loc='upper left')

    elif ticker == '304660': # KODEX 미국울트라30년선물(H)
        plt.plot(df.index[M_num::], df['rChange'][M_num::].cumprod(), label = name)
        plt.legend(loc='upper left')
        
    elif ticker == '152380': # KODEX 국채선물10년
        plt.plot(df.index[M_num::], df['rChange'][M_num::].cumprod(), label = name)
        plt.legend(loc='upper left')


## 실행 >>>today_macdo_get(ticker,'2017')
## ---------------------------------------------------------------------------------------------------
table_today_macdos = []
today_macdos = []
tomorrow_macdos = []
table_신호 = pd.DataFrame()
table_모멘텀 = pd.DataFrame()
table_rChange = pd.DataFrame()
M_num = 5


## 두리스트 초기화
n = 0
for unit in list(universe.keys()):
    ticker = unit
    n = n+1
    name = universe[ticker]
    today_macdo_get(ticker,'2017-05')
    #print("---------------------------------------")


table_today_macdos = pd.DataFrame()

table_비중 = table_신호 * table_모멘텀
SSum = table_비중.sum(axis=1)


#print(table_신호.tail())
#print(table_모멘텀.tail())
#print(table_비중.tail()) 

k = 0 
for row in table_비중.values:
    #print(row)
    table_비중.values[k] = pd.Series(row / SSum[k] * 100)
    k = k+1
#print(table_비중)
#print(table_비중.tail())
#print(table_rChange)


## 전체실행 --------------------------------------------------------------------------------------
##
## date_w = pd.Series(table_비중.values[6] / SSum[6] * 100)
## date_w_sum = pd.DataFrame(table_비중.values[6] / SSum[6] * 100).sum(axis=0)
## axis = 1 : 가로로 단일 row 합,  axis =0 : 세로로 단일 column 합. 
## ___________<< Date[6] 의 밸류인 
## table_비중.values[6] = pd.Series(table_비중.values[6] / SSum[6] * 100)
##
##
###
###
###
### table_비중.sum(axis=1)
##### row별 비중합 100% 확인
###
###
###
###
###
###
###
### ## 5일 모멘텀을 비중으로 결정했으니 5일이 모자라는 head의 5일 비중합은 0, cumprod()도 0 가되니까 배제 . 
### ## 6부터 카운트 ㄱㄱ
plt.plot(table_rChange.index[M_num::], ((table_비중 * table_rChange).sum(axis=1) / 100)[M_num::].cumprod(), label = 'S__Port')
plt.legend(loc = 'upper left')
